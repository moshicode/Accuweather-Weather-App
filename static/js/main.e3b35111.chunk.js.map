{"version":3,"sources":["actions/index.js","components/Header.js","actions/weatherActions.js","helpers/converter.js","components/WeatherList.js","actions/suggestionsActions.js","components/SearchInput.js","components/Hero.js","components/Home.js","components/Favorites.js","routes/index.js","App.js","reducers/favorites.js","helpers/localStorage.js","reducers/isMetric.js","reducers/darkmode.js","reducers/isLoading.js","reducers/weather.js","reducers/location.js","reducers/suggestions.js","reducers/index.js","store/index.js","index.js"],"names":["addFavorite","id","name","type","payload","removeFavorite","Header","favorites","useSelector","state","favoritesData","isMetric","dispatch","useDispatch","react_default","a","createElement","className","react_router_dom","to","length","onClick","e","API_KEY","ROOT_URL","getLocationKeyByGEO","latitude","longitude","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","getState","response","wrap","_context","prev","next","axios","get","concat","sent","cityName","data","ParentCity","LocalizedName","key","Key","getWeather","location","stop","_x","_x2","apply","this","arguments","getLocation","_ref2","_callee2","_context2","_x3","locationKey","_ref3","_callee3","_context3","getCurrentWeather","getDailyForecasts","_x4","_ref4","_callee4","_context4","_x5","_ref5","_callee5","_context5","DailyForecasts","_x6","converter","min","max","undefined","toFixed","WeatherList","dailyForecasts","weather","forecasts","currentWeather","current","isDayTime","IsDayTime","WeatherText","Temperature","Metric","Value","some","map","forecast","index","moment","Date","format","Icon","Minimum","Maximum","IconPhrase","getSuggestions","suggest","country","Country","SearchInput","suggestions","handleChange","value","target","handleSubmit","text","isFetching","locations","handleKeyPress","charCode","preventDefault","suggestionSelected","locationRawData","placeholder","onChange","onKeyPress","abrupt","Hero","isDarkMode","isDark","heroImage","Photos","LandscapeLink","replace","style","backgroundImage","components_SearchInput","Home","isLoading","Fragment","components_Hero","components_WeatherList","Favorites","_useState","useState","_useState2","slicedToArray","favs","setFav","_useState3","_useState4","setFetch","useEffect","fetchFavorites","tempFavorites","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","favorite","asyncIterator","done","t0","return","finish","Routes","react_router","path","exact","component","App","navigator","geolocation","getCurrentPosition","position","coords","err","console","log","message","components_Header","routes","intialState","serializedState","localStorage","getItem","JSON","parse","loadState","favoritesReducer","action","toConsumableArray","filter","item","objectSpread","metricReducer","darkModeReducer","weatherReducer","locationReducer","initialState","suggestionsReducer","rootReducers","combineReducers","loadingReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e3b35111.chunk.js","sourcesContent":["\r\n// Favorites\r\nexport const addFavorite = (id, name) => {\r\n    return {\r\n        type: 'ADD_FAVORITE',\r\n        payload: {\r\n            id: id,\r\n            name: name\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const removeFavorite = id => {\r\n    return {\r\n        type: 'REMOVE_FAVORITE',\r\n        payload: id\r\n    }\r\n}\r\n\r\n// Loading\r\n\r\nexport const toggleLoading = () => {\r\n    return {\r\n        type: 'TOGGLE_LOADING'\r\n    }\r\n}\r\n\r\n// Convert temp\r\n\r\nexport const convertUnits = () => {\r\n    return {\r\n        type: 'CONVERT_TEMPERATURE_UNITS'\r\n    }\r\n}\r\n\r\n// Dark Mode\r\n\r\nexport const toggleDarkMode = () => {\r\n    return {\r\n        type: 'SET_DARK_MODE'\r\n    }\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { toggleDarkMode, convertUnits } from '../actions'\r\n\r\nconst Header = () => {\r\n    const favorites = useSelector(state => state.favoritesData)\r\n    const isMetric = useSelector(state => state.isMetric)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <nav className=\"header__navbar\">\r\n                    <h1 className=\"header__logo\">\r\n                        <Link to=\"/\">Weather App</Link>\r\n                    </h1>\r\n                    <ul className=\"header__list\">\r\n                        <li>\r\n                            <Link to=\"/favorites\">\r\n                                <i className=\"header__favorite-icon fas fa-heart\">\r\n                                    <div className=\"header__favorite-num\">{favorites.length}</div>\r\n                                </i>\r\n                            </Link>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={(e) => dispatch(toggleDarkMode())}><i className=\"fas fa-adjust\"></i></button>\r\n                        </li>\r\n                        <li>\r\n                            <button onClick={e => dispatch(convertUnits())}><div className=\"header__unit-icon\">{isMetric ? '\\xB0C' : '\\xB0F'}</div></button>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import axios from 'axios'\r\n\r\nconst API_KEY = 'DVaSHCZ2oK98ZriCAWD9hnT7V0jxRO9g'\r\nconst ROOT_URL = 'https://dataservice.accuweather.com'\r\n\r\n// Get location RAW DATA { key, cityName } By GEO LOCATION (if accepted) => after: auto excute getWeather() \r\nexport const getLocationKeyByGEO = (latitude, longitude) => async (dispatch, getState) => {\r\n    const response = await axios.get(`${ROOT_URL}/locations/v1/cities/geoposition/search?q=${latitude},${longitude}&apikey=${API_KEY}`)\r\n    await dispatch({ type: 'SET_LOCATION', payload: { cityName: response.data.ParentCity.LocalizedName, key: response.data.ParentCity.Key } })\r\n    await dispatch(getWeather(getState().location.key))\r\n}\r\n\r\n// Get location RAW DATA { key, cityName} by city name => after: auto excute getWeather() \r\nexport const getLocation = cityName => async dispatch => {\r\n    const response = await axios.get(`${ROOT_URL}/locations/v1/cities/autocomplete?q=${cityName}&apikey=${API_KEY}`)\r\n    await dispatch({ type: 'SET_LOCATION', payload: { cityName: response.data[0].LocalizedName, key: response.data[0].Key } })\r\n    await dispatch(getWeather(response.data[0].Key))\r\n}\r\n\r\n// Get All Weather details by getCurrentWeather() and getDailyForecasts()\r\nexport const getWeather = locationKey => async dispatch => {\r\n    await dispatch(getCurrentWeather(locationKey))\r\n    await dispatch(getDailyForecasts(locationKey))\r\n    await dispatch({ type: 'TOGGLE_LOADING' })\r\n}\r\n\r\n// Get Current Weather by location Key\r\nexport const getCurrentWeather = locationKey => async dispatch => {\r\n    const response = await axios.get(`${ROOT_URL}/currentconditions/v1/${locationKey}?apikey=${API_KEY}&getphotos=true`)\r\n    await dispatch({ type: 'GET_CURRENT_WEATHER', payload: response.data[0] })\r\n}\r\n\r\n// Get DailyForecasts by location Key\r\nexport const getDailyForecasts = locationKey => async dispatch => {\r\n    const response = await axios.get(`${ROOT_URL}/forecasts/v1/daily/5day/${locationKey}?apikey=${API_KEY}&metric=true`)\r\n    await dispatch({ type: 'GET_DAILY_FORECASTS', payload: response.data.DailyForecasts })\r\n}\r\n","export const converter = (min, max) => {\r\n    // const formula = (num * 9 / 5 + 32).toFixed(2)\r\n    if (max === undefined) {\r\n        return `${(min * 9 / 5 + 32).toFixed(2)}\\xB0F`\r\n    } else {\r\n        return `${(min * 9 / 5 + 32).toFixed(2)}\\xB0F - ${(max * 9 / 5 + 32).toFixed(2)}\\xB0F `\r\n    }\r\n}","import React from 'react';\r\nimport moment from 'moment'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addFavorite, removeFavorite } from '../actions'\r\nimport { converter } from '../helpers/converter'\r\n\r\nfunction WeatherList() {\r\n\r\n    const dailyForecasts = useSelector(state => state.weather.forecasts)\r\n    const currentWeather = useSelector(state => state.weather.current)\r\n    const location = useSelector(state => state.location)\r\n    const favorites = useSelector(state => state.favoritesData)\r\n    const isMetric = useSelector(state => state.isMetric)\r\n    const dispatch = useDispatch()\r\n    const isDayTime = currentWeather.IsDayTime ? 'Day' : 'Night'\r\n\r\n    return (\r\n        <div className=\"weather-forecast container\">\r\n            <div className=\"weather-current__today\">\r\n                <h2 className=\"weather-current__title\">{location.cityName}</h2>\r\n                <div className=\"weather-forecast__current\">\r\n                    <p className=\"weather-forecast__day\">Today</p>\r\n                    <p className=\"weather-forecast__text\">{currentWeather.WeatherText}</p>\r\n                    <p className=\"weather-forecast__temp\">{isMetric ? `${currentWeather.Temperature.Metric.Value}\\xB0C` : converter(currentWeather.Temperature.Metric.Value)}</p>\r\n                </div>\r\n                {favorites.some(({ id }) => id === location.key) ?\r\n                    <button className=\"weather-current__btn\" onClick={() => dispatch(\r\n                        removeFavorite(location.key, location.cityName))}>Unfollow\r\n                </button> :\r\n                    <button className=\"weather-current__btn\" onClick={() => dispatch(\r\n                        addFavorite(location.key, location.cityName))}>Follow\r\n                </button>\r\n                }\r\n\r\n            </div>\r\n\r\n            <div className=\"weather-forecast__list\">\r\n                {dailyForecasts.map((forecast, index) =>\r\n                    <div key={index} className=\"weather-forecast__item\">\r\n                        <p className=\"weather-forecast__day\">{moment(forecast.Date).format('ddd')}</p>\r\n                        <p className=\"weather-forecast__icon\"><i className={`wi icon-accu${forecast[isDayTime].Icon}`}></i></p>\r\n                        <p className=\"weather-forecast__temp\">{isMetric ? `${forecast.Temperature.Minimum.Value}\\xB0C - ${forecast.Temperature.Maximum.Value}\\xB0C` : converter(forecast.Temperature.Minimum.Value, forecast.Temperature.Maximum.Value)}</p>\r\n                        <p className=\"weather__forecast__text\">{forecast[isDayTime].IconPhrase}</p>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherList;\r\n","import axios from 'axios'\r\n\r\nconst API_KEY = 'DVaSHCZ2oK98ZriCAWD9hnT7V0jxRO9g'\r\nconst ROOT_URL = 'https://dataservice.accuweather.com'\r\n\r\n// Get array of locations suggestions with RAW DATA { cityName, key, country }\r\nexport const getSuggestions = cityName => async dispatch => {\r\n    if (cityName !== '') {\r\n        await dispatch({ type: 'GET_SUGGESTIONS_REQ' })\r\n        const response = await axios.get(`${ROOT_URL}/locations/v1/cities/autocomplete?q=${cityName}&apikey=${API_KEY}`)\r\n        await dispatch({ type: 'GET_SUGGESTIONS_RES', payload: response.data.map(suggest => ({ cityName: suggest.LocalizedName, key: suggest.Key, country: suggest.Country.LocalizedName })) })\r\n    }\r\n}\r\n\r\n// Set location RAW DATA { cityName, key, country} - only if it select from the locations suggestions\r\nexport const setLocationBySuggestion = location => {\r\n    return {\r\n        type: 'SET_LOCATION',\r\n        payload: location\r\n    }\r\n}\r\n\r\n// Set text value from the search box\r\nexport const setSuggestValue = text => {\r\n    return {\r\n        type: 'SET_TEXT',\r\n        payload: text\r\n    }\r\n}\r\n\r\n// Reset suggestions and text value to default\r\nexport const resetSuggestions = () => {\r\n    return {\r\n        type: 'RESET_SUGGESTIONS'\r\n    }\r\n}","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { getLocation, getWeather } from '../actions/weatherActions'\r\nimport { getSuggestions, resetSuggestions, setLocationBySuggestion, setSuggestValue } from '../actions/suggestionsActions'\r\n// import { throttle } from 'lodash';\r\n\r\n\r\nconst SearchInput = () => {\r\n    const suggestions = useSelector(state => state.suggestions)\r\n    const dispatch = useDispatch()\r\n\r\n    const handleChange = async e => {\r\n        const value = e.target.value\r\n        dispatch(setSuggestValue(value))\r\n        if (value.length > 0) {\r\n            await dispatch(getSuggestions(value))\r\n        } else {\r\n            dispatch(resetSuggestions())\r\n        }\r\n    }\r\n\r\n    const handleSubmit = async e => {\r\n        if (suggestions.text.length > 0 && suggestions.isFetching === 0 && suggestions.locations.length > 0) {\r\n            await dispatch(getLocation(suggestions.locations[0].cityName))\r\n            dispatch(resetSuggestions())\r\n        }\r\n    }\r\n\r\n    const handleKeyPress = async e => {\r\n        if (e.charCode === 13 || e.key === 'Enter') {\r\n            e.preventDefault()\r\n            await handleSubmit()\r\n        }\r\n    }\r\n\r\n    const labelButton = () => {\r\n        if (suggestions.locations.length > 0 && suggestions.text.length > 0) {\r\n            return (\r\n                <button\r\n                    className=\"search__btn\"\r\n                    onClick={() => dispatch(resetSuggestions())}\r\n                >\r\n                    <i className=\"fas fa-times\"></i>\r\n                </button>\r\n            )\r\n        }\r\n        return (\r\n            <button\r\n                className=\"search__btn\"\r\n                onClick={handleSubmit}>\r\n                <i className=\"fas fa-search\"></i>\r\n            </button>\r\n        )\r\n\r\n    }\r\n\r\n    const suggestionSelected = async locationRawData => {\r\n        dispatch(resetSuggestions())\r\n        await dispatch(setLocationBySuggestion(locationRawData))\r\n        await dispatch(getWeather(locationRawData.key))\r\n    }\r\n\r\n    const renderSuggestions = () => {\r\n        if (suggestions.locations.length === 0 || suggestions.text.length === 0) {\r\n            return null\r\n        }\r\n\r\n        return (\r\n            <ul className=\"search__results results\">\r\n                {suggestions.locations.map((location, index) =>\r\n                    <li\r\n                        key={index}\r\n                        onClick={async () => await suggestionSelected(location)}\r\n                    >\r\n                        <span>{location.cityName}</span><span className=\"search__label\">{location.country}</span>\r\n                    </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"hero__search search\">\r\n            <input\r\n                className=\"search__input\"\r\n                type=\"text\"\r\n                placeholder=\"Search By City...\"\r\n                onChange={handleChange}\r\n                value={suggestions.text}\r\n                onKeyPress={handleKeyPress}\r\n            />\r\n            {labelButton()}\r\n            {renderSuggestions()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport SearchInput from './SearchInput'\r\n\r\nconst Hero = () => {\r\n    const currentWeather = useSelector(state => state.weather.current)\r\n    const isDarkMode = useSelector(state => state.isDark)\r\n    const heroImage = `linear-gradient(rgba(245, 177, 83, 0.75), ${isDarkMode ? '#000718' : '#fff'}), url(${currentWeather.Photos[0].LandscapeLink.replace(\"_L_L\", \"_L_XXL\")})`\r\n    return (\r\n        <div className=\"hero\" style={{ backgroundImage: heroImage }} >\r\n            <SearchInput />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Hero","import React from 'react'\r\nimport WeatherList from './WeatherList'\r\nimport Hero from './Hero'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst Home = () => {\r\n    const isLoading = useSelector(state => state.isLoading)\r\n    if (isLoading) return <div className=\"loading-wrapper\"><div className=\"cloudy\"></div></div>\r\n    return (\r\n        <>\r\n            <Hero />\r\n            <WeatherList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Home","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { removeFavorite } from '../actions'\r\nimport axios from 'axios'\r\nimport { converter } from '../helpers/converter';\r\n\r\nfunction Favorites() {\r\n    const favorites = useSelector(state => state.favoritesData)\r\n    const isMetric = useSelector(state => state.isMetric)\r\n    const dispatch = useDispatch()\r\n\r\n    const [favs, setFav] = useState([]);\r\n    const [isFetching, setFetch] = useState(true)\r\n\r\n    useEffect(() => {\r\n        fetchFavorites()\r\n    }, []);\r\n\r\n    const fetchFavorites = async () => {\r\n        setFetch(true)\r\n        const tempFavorites = {}\r\n        for await (let favorite of favorites) {\r\n            const response = await axios.get(`https://dataservice.accuweather.com/currentconditions/v1/${favorite.id}?apikey=DVaSHCZ2oK98ZriCAWD9hnT7V0jxRO9g&getphotos=true`)\r\n            tempFavorites[favorite.id] = response.data[0]\r\n        }\r\n        setFav(tempFavorites)\r\n        await setFetch(false)\r\n    }\r\n\r\n    if (isFetching) {\r\n        return (\r\n            <div className=\"favorites container\">loading...</div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"favorites container\">\r\n            {favorites.map((favorite, index) =>\r\n                <div\r\n                    className=\"favorites__item\"\r\n                    key={index}>\r\n                    <p>{favorite.name}</p>\r\n                    <p>{favs[favorite.id].WeatherText}</p>\r\n                    <p>{isMetric ? `${favs[favorite.id].Temperature.Metric.Value}\\xB0C` : converter(favs[favorite.id].Temperature.Metric.Value)}</p>\r\n                    <button\r\n                        onClick={() => dispatch(removeFavorite(favorite.id))}>\r\n                        Remove Favorite\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Favorites;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport Home from '../components/Home'\r\nimport Favorites from '../components/Favorites'\r\n\r\nfunction Routes() {\r\n    return (\r\n        <Switch>\r\n            <Route path='/' exact component={Home} />\r\n            <Route path='/favorites' component={Favorites} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n\r\n","import React, { useEffect } from 'react';\nimport './styles/style.css'\nimport Header from './components/Header'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { getLocation, getLocationKeyByGEO } from './actions/weatherActions'\nimport Routes from './routes'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const isDarkMode = useSelector(state => state.isDark)\n\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(\n      position => dispatch(getLocationKeyByGEO(position.coords.latitude, position.coords.longitude)),\n      err => {\n        console.log(err.message)\n        dispatch(getLocation('Jerusalem'))\n      }\n    )\n  }, [dispatch])\n\n  return (\n    <div className={isDarkMode ? 'app dark' : 'app'}>\n      <Header />\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","import { loadState } from '../helpers/localStorage'\r\n\r\nconst intialState = loadState()\r\n\r\nconst favoritesReducer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_FAVORITE':\r\n            return [\r\n                ...state,\r\n                action.payload\r\n            ]\r\n        case 'REMOVE_FAVORITE':\r\n            return state.filter((item) => item.id !== action.payload)\r\n        case 'UPDATE_FAVORITE':\r\n            return state.map(favorite => {\r\n                return {\r\n                    ...favorite,\r\n                    currentWeather: action.payload\r\n                }\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default favoritesReducer","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('favorites')\r\n        if (serializedState === null) {\r\n            return []\r\n        }\r\n        return JSON.parse(serializedState)\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('favorites', serializedState)\r\n    } catch (err) {\r\n        // IGNORE\r\n    }\r\n}\r\n\r\n","const metricReducer = (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'CONVERT_TEMPERATURE_UNITS':\r\n            return !state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default metricReducer","const darkModeReducer = (state = false, action) => {\r\n    switch (action.type) {\r\n        case 'SET_DARK_MODE':\r\n            return !state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default darkModeReducer","const isLoading = (state = true, action) => {\r\n    switch (action.type) {\r\n        case 'TOGGLE_LOADING':\r\n            return false\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default isLoading\r\n","\r\nconst weatherReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        // case 'GET_LOCATION':\r\n        //     return {\r\n        //         ...state,\r\n        //         location: action.payload\r\n        //     }\r\n        case 'GET_CURRENT_WEATHER':\r\n            return {\r\n                ...state,\r\n                current: action.payload\r\n            }\r\n        case 'GET_DAILY_FORECASTS':\r\n            return {\r\n                ...state,\r\n                forecasts: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default weatherReducer","const locationReducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'SET_LOCATION':\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default locationReducer","const initialState = {\r\n    isFetching: 0,\r\n    text: '',\r\n    locations: []\r\n}\r\nconst suggestionsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'GET_SUGGESTIONS_REQ':\r\n            return {\r\n                ...state,\r\n                isFetching: state.isFetching + 1,\r\n            }\r\n        case 'GET_SUGGESTIONS_RES':\r\n            return {\r\n                ...state,\r\n                isFetching: state.isFetching - 1,\r\n                locations: action.payload\r\n            }\r\n        case 'RESET_SUGGESTIONS':\r\n            return {\r\n                ...state,\r\n                text: '',\r\n                locations: []\r\n            }\r\n        case 'SET_TEXT':\r\n            return { ...state, text: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default suggestionsReducer","import { combineReducers } from 'redux'\r\n\r\nimport favoritesReducer from './favorites'\r\nimport metricReducer from './isMetric'\r\nimport darkModeReducer from './darkmode'\r\nimport loadingReducer from './isLoading'\r\n\r\nimport weatherReducer from './weather'\r\nimport locationReducer from './location'\r\nimport suggestionsReducer from './suggestions'\r\n\r\nconst rootReducers = combineReducers({\r\n    favoritesData: favoritesReducer,\r\n    isMetric: metricReducer,\r\n    isDark: darkModeReducer,\r\n    isLoading: loadingReducer,\r\n    weather: weatherReducer,\r\n    location: locationReducer,\r\n    suggestions: suggestionsReducer,\r\n})\r\n\r\nexport default rootReducers","import thunk from 'redux-thunk'\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport rootReducers from '../reducers'\r\n\r\n// export const loadStore = () => {\r\n//     return createStore(rootReducers, composeEnhancers(\r\n//         applyMiddleware(thunk)\r\n//         ));\r\n//     }\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducers, composeEnhancers(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport { HashRouter as Router } from \"react-router-dom\";\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport { saveState } from './helpers/localStorage'\n\nstore.subscribe(() => {\n    saveState(store.getState().favoritesData)\n})\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}
